<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LLC BLOG</title>
  
  
  <link href="https://llc-zh.github.io/atom.xml" rel="self"/>
  
  <link href="https://llc-zh.github.io/"/>
  <updated>2021-11-10T10:07:57.658Z</updated>
  <id>https://llc-zh.github.io/</id>
  
  <author>
    <name>野风掠原</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式学习(一)</title>
    <link href="https://llc-zh.github.io/2021/11/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>https://llc-zh.github.io/2021/11/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E4%B8%80/</id>
    <published>2021-11-10T10:07:00.000Z</published>
    <updated>2021-11-10T10:07:57.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="一、设计模式的目的"><a href="#一、设计模式的目的" class="headerlink" title="一、设计模式的目的"></a>一、设计模式的目的</h3><p>让程序（软件）具有更好的</p><ol><li>代码重用性（即：相同功能的代码，不用多次编写）</li><li>可读性（即：编程规范性，便于其他程序员阅读和理解）</li><li>可扩展性（即：当需要增加新功能时，非常方便，称为可维护性）</li><li>可靠性（即：当我们增加新功能后，对原来的功能没有影响）</li><li>使程序呈现高内聚、低耦合的特性</li></ol><h3 id="二、设计模式七大原则"><a href="#二、设计模式七大原则" class="headerlink" title="二、设计模式七大原则"></a>二、设计模式七大原则</h3><ol><li><p>单一职责原则</p><p>(1)、传统方式</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResponsibility1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Vehicle vehicle = <span class="hljs-keyword">new</span> Vehicle();<br>vehicle.run(<span class="hljs-string">&quot;小汽车&quot;</span>);<br>vehicle.run(<span class="hljs-string">&quot;摩托车&quot;</span>);<br>vehicle.run(<span class="hljs-string">&quot;飞机&quot;</span>);<br>        <span class="hljs-comment">//飞机也会输出在公路上运行，明显不符合现实</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//车俩工具类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在公路上运行......&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）、改进方案1</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResponsibility2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>RoadVehicle roadVehicle = <span class="hljs-keyword">new</span> RoadVehicle();<br>roadVehicle.run(<span class="hljs-string">&quot;摩托车&quot;</span>);<br>roadVehicle.run(<span class="hljs-string">&quot;汽车&quot;</span>);<br>AirVehicle airVehicle = <span class="hljs-keyword">new</span> AirVehicle();<br>airVehicle.run(<span class="hljs-string">&quot;飞机&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoadVehicle</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在公路上运行......&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirVehicle</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在天上运行......&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SeaVehicle</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在海里运行......&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）、改进方案2</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResponsibility3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Vehicle2 vehicle = <span class="hljs-keyword">new</span> Vehicle2();<br>vehicle.run(<span class="hljs-string">&quot;摩托车&quot;</span>);<br>vehicle.runWater(<span class="hljs-string">&quot;轮船&quot;</span>);<br>vehicle.runAir(<span class="hljs-string">&quot;飞机&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//车俩工具类,类不完全遵守单一职责，类中的方法遵守单一职责</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在公路上运行......&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runWater</span> <span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在水上运行......&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runAir</span> <span class="hljs-params">(String vehicle)</span> </span>&#123;<br>System.out.println(vehicle+<span class="hljs-string">&quot;在天上运行......&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口隔离原则</p><p>（1）、传统方案</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Segregation1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>A a = <span class="hljs-keyword">new</span> A();<br>a.dependency1(<span class="hljs-keyword">new</span> B());<br>a.dependency2(<span class="hljs-keyword">new</span> B());<br>a.dependency3(<span class="hljs-keyword">new</span> B());<br>C c = <span class="hljs-keyword">new</span> C();<br>c.dependency1(<span class="hljs-keyword">new</span> D());<br>c.dependency4(<span class="hljs-keyword">new</span> D());<br>c.dependency5(<span class="hljs-keyword">new</span> D());<br>        <span class="hljs-comment">//B冗余的实现了4和5方法，对于A不是最小接口。C同理</span><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface1</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation3&quot;</span>);<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation4&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation5&quot;</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation1&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation2&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation3&quot;</span>);<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation4&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation5&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency2</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation2();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency3</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation3();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency4</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation4();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency5</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation5();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）、改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Segregation1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>A a = <span class="hljs-keyword">new</span> A();<br>a.dependency1(<span class="hljs-keyword">new</span> B());<br>a.dependency2(<span class="hljs-keyword">new</span> B());<br>a.dependency3(<span class="hljs-keyword">new</span> B());<br>C c = <span class="hljs-keyword">new</span> C();<br>c.dependency1(<span class="hljs-keyword">new</span> D());<br>c.dependency4(<span class="hljs-keyword">new</span> D());<br>c.dependency5(<span class="hljs-keyword">new</span> D());<br>        <span class="hljs-comment">//对于A和C来说，都是通过最小接口来各自形成依赖</span><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface1</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface2</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface3</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//B实现了1和2接口，形式上实现了多继承，而且没有冗余方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span> ,<span class="hljs-title">interface2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 operation3&quot;</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//D同理</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span> , <span class="hljs-title">interface3</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation1&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation4&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 operation5&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency2</span><span class="hljs-params">(interface2 i)</span> </span>&#123;<br>i.operation2();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency3</span><span class="hljs-params">(interface2 i)</span> </span>&#123;<br>i.operation3();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency4</span><span class="hljs-params">(interface3 i)</span> </span>&#123;<br>i.operation4();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dependency5</span><span class="hljs-params">(interface3 i)</span> </span>&#123;<br>i.operation5();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>依赖倒转（倒置）原则</p><p>（1）、传统方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependecyInversion</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>Person person = <span class="hljs-keyword">new</span> Person();<br>person.receive(<span class="hljs-keyword">new</span> Email());<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息: hello world&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//person类接受消息</span><br><span class="hljs-comment">//只能接受邮件消息，还有微信，短信等消息，则需要增加相应类还要有方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(Email email)</span> </span>&#123;<br>System.out.println(email.getInfo());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）、改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependecyInversion</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>Person person = <span class="hljs-keyword">new</span> Person();<br>person.receive(<span class="hljs-keyword">new</span> Email());<br>person.receive(<span class="hljs-keyword">new</span> WeiXin());<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IReceiver</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IReceiver</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息: hello world&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeiXin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IReceiver</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信信息:hello ok&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//person类接受消息</span><br><span class="hljs-comment">//只能接受邮件消息，还有微信，短信等消息，则需要增加相应类还要有方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><span class="hljs-comment">//对接口依赖</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(IReceiver receiver)</span> </span>&#123;<br>System.out.println(receiver.getInfo());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>里氏替换原则（子类尽量不要重写父类的方法）</p><p>(1)、传统继承</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yema.principle.liskov;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Liskov</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>A a = <span class="hljs-keyword">new</span> A();<br>System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + a.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span> + a.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<br><br>System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br><br>B b = <span class="hljs-keyword">new</span> B();<br>System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + b.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">//本意是求11-3，但无意识的重写了该方法，导致功能变了</span><br>System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span> + b.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<span class="hljs-comment">//1-8</span><br>System.out.println(<span class="hljs-string">&quot;11+3+9=&quot;</span> + b.func2(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1,<span class="hljs-keyword">int</span> num2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> num1-num2;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-comment">//重写了A类的方法，可能是无意识的（误写，呈现侵入性）</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> func1(a, b) + <span class="hljs-number">9</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）、改进方案(A和B解耦合，A和B之间的耦合关系减弱，改为A和B组合)</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yema.principle.liskov.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Liskov</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>A a = <span class="hljs-keyword">new</span> A();<br>System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span> + a.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span> + a.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<br><br>System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br><br>B b = <span class="hljs-keyword">new</span> B();<br><span class="hljs-comment">//因为B类不再继承A类，因此调用者，不会再func1是求减法</span><br><span class="hljs-comment">//调用完成的功能就会很明确</span><br>System.out.println(<span class="hljs-string">&quot;11+3=&quot;</span> + b.func1(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">//本意是求11+3</span><br>System.out.println(<span class="hljs-string">&quot;1+8=&quot;</span> + b.func1(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<span class="hljs-comment">//1+8</span><br>System.out.println(<span class="hljs-string">&quot;11+3+9=&quot;</span> + b.func2(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br><br><span class="hljs-comment">//使用组合仍然可以使用A类相关的方法</span><br>System.out.println(<span class="hljs-string">&quot;11-3=&quot;</span>+b.func3(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>));<br>System.out.println(<span class="hljs-string">&quot;1-8=&quot;</span>+b.func3(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>));<br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//创建一个更加基础的基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1,<span class="hljs-keyword">int</span> num2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> num1-num2;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br><br><span class="hljs-comment">//如果B需要使用A类的方法，使用组合关系</span><br><span class="hljs-keyword">private</span> A a = <span class="hljs-keyword">new</span> A() ;<br><br><span class="hljs-comment">//重写了A类的方法，可能是无意识的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> func1(a, b) + <span class="hljs-number">9</span>;<br>&#125;<br><span class="hljs-comment">//在这里调用A的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.a.func1(a, b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开闭原则</p><p>（1）、传统方案(新增一个类时，修改的地方比较多)</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yema.principle.ocp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ocp</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>GraphicEditor graphicEditor = <span class="hljs-keyword">new</span> GraphicEditor();<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> Rectangle());<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> Circle());<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> Triangle());<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//一个用于绘图的类【使用方】</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphicEditor</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawShape</span><span class="hljs-params">(Shape s)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">1</span>) <br>drawRectangle(s);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">2</span>) &#123;<br>drawCircle(s);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">3</span>) &#123;<br>drawTriangle(s);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(Shape r)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 绘制矩形 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(Shape r)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 绘制圆形 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawTriangle</span><span class="hljs-params">(Shape r)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 绘制三角形 &quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span></span>&#123;<br><span class="hljs-keyword">int</span> m_type;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">3</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）、改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yema.principle.ocp.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ocp</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>GraphicEditor graphicEditor = <span class="hljs-keyword">new</span> GraphicEditor();<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> Rectangle());<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> Circle());<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> Triangle());<br>graphicEditor.drawShape(<span class="hljs-keyword">new</span> OtherGraphic());<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//一个用于绘图的类【使用方】</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphicEditor</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawShape</span><span class="hljs-params">(Shape s)</span> </span>&#123;<br>s.draw();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span></span>&#123;<br><span class="hljs-keyword">int</span> m_type;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制矩形&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制圆形&quot;</span>);<br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span><span class="hljs-params">()</span> </span>&#123;<br>m_type = <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制三角形&quot;</span>);<br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherGraphic</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OtherGraphic</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制其他图形&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迪米特法则(降低类之间的耦合)</p><p>（1）、传统方案</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yema.principle.demeter;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demeter1</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SchoolManager schoolManager = <span class="hljs-keyword">new</span> SchoolManager();<br>schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> CollegeManager());<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//学校员工总部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//学院员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeEmployee</span> </span>&#123;<br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//管理学院员工的管理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeManager</span> </span>&#123;<br><span class="hljs-comment">//返回学院的所有员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>CollegeEmployee emp = <span class="hljs-keyword">new</span> CollegeEmployee();<br>emp.setId(<span class="hljs-string">&quot;学院员工id= &quot;</span> + i);<br>list.add(emp);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//学校管理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolManager</span> </span>&#123;<br><span class="hljs-comment">//返回学校总部的员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getAllEmployees</span><span class="hljs-params">()</span></span>&#123;<br>List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>Employee emp = <span class="hljs-keyword">new</span> Employee();<br>emp.setId(<span class="hljs-string">&quot;学校总部员工id = &quot;</span> + i);<br>list.add(emp);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> </span>&#123;<br><br><span class="hljs-comment">//获取学院员工</span><br>List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();<br>System.out.println(<span class="hljs-string">&quot;----------分公司员工-----------&quot;</span>);<br><span class="hljs-keyword">for</span>(CollegeEmployee e : list1) &#123;<br>System.out.println(e.getId());<br>&#125;<br><span class="hljs-comment">//获取学校员工</span><br>List&lt;Employee&gt; list2 = <span class="hljs-keyword">this</span>.getAllEmployees();<br>System.out.println(<span class="hljs-string">&quot;----------学校总部员工-----------&quot;</span>);<br><span class="hljs-keyword">for</span>(Employee e : list2) &#123;<br>System.out.println(e.getId());<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>(2)、改进方案</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yema.principle.demeter.improve;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demeter1</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SchoolManager schoolManager = <span class="hljs-keyword">new</span> SchoolManager();<br>schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> CollegeManager());<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//学校员工总部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//学院员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeEmployee</span> </span>&#123;<br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//管理学院员工的管理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeManager</span> </span>&#123;<br><span class="hljs-comment">//返回学院的所有员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>CollegeEmployee emp = <span class="hljs-keyword">new</span> CollegeEmployee();<br>emp.setId(<span class="hljs-string">&quot;学院员工id= &quot;</span> + i);<br>list.add(emp);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printAllEmployee</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;CollegeEmployee&gt; list = getAllEmployee();<br>System.out.println(<span class="hljs-string">&quot;----------学院员工---------&quot;</span>);<br><span class="hljs-keyword">for</span>(CollegeEmployee e :list) &#123;<br>System.out.println(e.getId());<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//学校管理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolManager</span> </span>&#123;<br><span class="hljs-comment">//返回学校总部的员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getAllEmployees</span><span class="hljs-params">()</span></span>&#123;<br>List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>Employee emp = <span class="hljs-keyword">new</span> Employee();<br>emp.setId(<span class="hljs-string">&quot;学校总部员工id = &quot;</span> + i);<br>list.add(emp);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> </span>&#123;<br><br><span class="hljs-comment">//获取学院员工</span><br>sub.printAllEmployee();<br><span class="hljs-comment">//获取学校员工</span><br>List&lt;Employee&gt; list2 = <span class="hljs-keyword">this</span>.getAllEmployees();<br>System.out.println(<span class="hljs-string">&quot;----------学校总部员工-----------&quot;</span>);<br><span class="hljs-keyword">for</span>(Employee e : list2) &#123;<br>System.out.println(e.getId());<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>合成复用原则(尽量使用合成/聚合的方式，而不是继承)</p></li></ol><h3 id="三、UML类图"><a href="#三、UML类图" class="headerlink" title="三、UML类图"></a>三、UML类图</h3><ol><li>依赖（在类中用到了对方）</li><li>泛化（实际上就是继承关系，是依赖关系的特例）<ul><li>如果A类继承了B类，我们就说A和B存在泛化关系</li></ul></li><li>实现（实际上就是A类实现B类，他是依赖关系的特例）</li><li>关联（类与类之间的联系，他是依赖关系的特例）</li><li>聚合（整体与部分的关系，整体与部分可以分开，聚合关系是关联关系的特例）<ul><li>电脑、鼠标、显示器是聚合关系</li></ul></li><li>组合（整体和部分不能分开，同生共死）<ul><li>人、头、身份证，人和头是组合，人和身份证是聚合</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h3 id=&quot;一、设计模式的目的&quot;&gt;&lt;a href=&quot;#一、设计模式的目的&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="设计模式" scheme="https://llc-zh.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>儿童黑话(Pig Latin)语言加密算法</title>
    <link href="https://llc-zh.github.io/2021/11/09/%E5%84%BF%E7%AB%A5%E9%BB%91%E8%AF%9D-Pig-Latin/"/>
    <id>https://llc-zh.github.io/2021/11/09/%E5%84%BF%E7%AB%A5%E9%BB%91%E8%AF%9D-Pig-Latin/</id>
    <published>2021-11-09T07:28:44.000Z</published>
    <updated>2021-11-09T10:09:16.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pig-Latin-儿童黑话"><a href="#Pig-Latin-儿童黑话" class="headerlink" title="Pig Latin(儿童黑话)"></a>Pig Latin(儿童黑话)</h3><h4 id="我是怎么接触到Pig-Latin的？"><a href="#我是怎么接触到Pig-Latin的？" class="headerlink" title="我是怎么接触到Pig Latin的？"></a>我是怎么接触到Pig Latin的？</h4><p>实际上我是在C++ Program Algorithm（中译版）黑皮书上接触到的，当时看到这个短语还以为是跟猪相关，真是贻笑大方了。实际上这是个语言游戏，只不过也可以用来进行简单的语言加密。</p><p>后来在查阅资料的时候，发现了一个很有趣的一段话：”Ix-nay on the upid-stay.”。这段话出现在狮子王1中dodo鸟Zazu（沙祖）在大象墓地说的话，大概意思就是愚蠢的nalx。upid-stay实际上就是stupid，是一种非常地道的英语表达。</p><h4 id="什么是Pig-Latin"><a href="#什么是Pig-Latin" class="headerlink" title="什么是Pig Latin?"></a>什么是Pig Latin?</h4><p>儿童黑话(Pig Latin)是一种英语语言游戏，形式是在英语加上一点规则使发音改变。据说是由在德国的英国战俘发明来瞒混德军守卫的。儿童黑话于50年代和60年代在英国利物浦达到颠峰，各种年纪和职业的人都有使用。儿童黑话多半被儿童用来瞒著大人秘密沟通，有时则只是说著好玩。虽然是起源于英语的游戏，但是规则适用很多其他语言。</p><h4 id="Pig-Latin规则"><a href="#Pig-Latin规则" class="headerlink" title="Pig Latin规则?"></a>Pig Latin规则?</h4><ul><li><strong>假设单词以辅音字母开始，将词首的辅音字母字符串（第一个元音字母前的全部字母）从单词的开头移动到末尾，然后加上后缀ay，这样就形成了它的pig latin。</strong></li></ul><ol><li>比如说ball，它的第一个元音是a，那么它的Pig Latin就是all-bay.</li><li>three,元音是e，变成ee-thray.</li></ol><blockquote><p>怎么样？是不是很容易理解？</p></blockquote><ul><li><strong>那么对于元音字母开头的单词，该怎么描述它的黑话？仅仅加入后缀ay就可以，也可以是way,yay,hay。为了方便统一，在本文一律用way后缀。</strong></li><li><strong>让我们看看一个示例</strong></li></ul><p>One-way o-whay as-hay een-say e-thay ocean-way inks-thay othing-nay of-way ere-may ivers-ray.</p><p>（中译：曾经沧海难为水）</p><p>（英语：One who has seen the ocean thinks nothing of mere rivers.）</p><h4 id="如何用代码实现Pig-Latin语言加密？（以JAVA为例-实现单词Pig-Latin加密，语句加密在本篇暂不实现，期待后续实现）"><a href="#如何用代码实现Pig-Latin语言加密？（以JAVA为例-实现单词Pig-Latin加密，语句加密在本篇暂不实现，期待后续实现）" class="headerlink" title="如何用代码实现Pig Latin语言加密？（以JAVA为例,实现单词Pig Latin加密，语句加密在本篇暂不实现，期待后续实现）"></a>如何用代码实现Pig Latin语言加密？（以JAVA为例,实现单词Pig Latin加密，语句加密在本篇暂不实现，期待后续实现）</h4><ol><li>首先第一步，当然是要找出第一个元音字母的位置。（已知元音字母有a,e,i,o,u，其他的都是辅音字母）</li><li>第二步，判断元音字母出现的位置，如果是一个位置，则把备用后缀设为way，否则是ay</li><li>第三步，在第一个元音字母位置分离，把单词分离为两个部分。比如ball，分离为b和all.</li><li>第四步，将分离后的第二个部分放在首部，第一个部分放在尾部。</li><li>第五步，在第四部拼合的结果上，在尾部加入后缀。</li></ol><p>那么整个编程的思路就很明了了，接下来开始撸代码。</p><p>全部代码我就放在结尾了，因为，你知道的，很影响阅读效率。</p><h5 id="判断是否是元音字母"><a href="#判断是否是元音字母" class="headerlink" title="判断是否是元音字母"></a>判断是否是元音字母</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br><span class="hljs-keyword">switch</span>(ch) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">default</span> :<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码也很简单就是swith-case判断，但是有一个致命问题，就是没有办法分辨大写字母情况，实际上行首的字母通常是大写的，而且大写的元音字母也是元音。so，我们应该加上所有的大写字母吗？加上所有的元音大写字母的话，整个方法会显得很臃肿。实际上java里面String类有一个方法equalsIgnoreCase判断字母是否为指定字符而忽略大小写。</p><h5 id="修改后的判断是否是元音字母代码"><a href="#修改后的判断是否是元音字母代码" class="headerlink" title="修改后的判断是否是元音字母代码"></a>修改后的判断是否是元音字母代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>String str = String.valueOf(ch);<br><span class="hljs-keyword">if</span>(str.equalsIgnoreCase(<span class="hljs-string">&quot;a&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;i&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;o&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;u&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的"><a href="#还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的" class="headerlink" title="还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的"></a>还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//beforeWord:倒置前字符串,index:元音字母所在位置</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reversalWord</span><span class="hljs-params">(String beforeWord,<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>String frontWord = beforeWord.substring(<span class="hljs-number">0</span>,index);<br>String breakWord = beforeWord.substring(index);<br><span class="hljs-keyword">return</span> breakWord.concat(frontWord);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h5><p><img src="https://greenllrno.xyz/Pig_Latin_word_result.jpg" alt="结果"></p><h5 id="剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码"><a href="#剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码" class="headerlink" title="剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码"></a>剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码</h5><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ol><li>还可以进一步优化思路，提高程序健壮程度，降低时间复杂度。</li><li>只是实现了单个单词的Pig Latin加密，句子的Pig Latin加密没有实现，因为句子的情况更为复杂。</li></ol><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise1;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.StringTokenizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//从键盘输入</span><br>    String word=scanner.nextLine();<br>    System.out.println(translateWord(word));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">translateWord</span><span class="hljs-params">(String inputWord)</span> </span>&#123;<br>String breakWord = <span class="hljs-string">&quot;&quot;</span>;<br>String afterWord = <span class="hljs-string">&quot;&quot;</span>;<br>StringBuilder endWord = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-keyword">int</span> i = indexOfVowel(inputWord);<br><br><span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) &#123;<br>breakWord = <span class="hljs-string">&quot;way&quot;</span>;<br>endWord.append(inputWord);<br>endWord.append(breakWord);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>breakWord = <span class="hljs-string">&quot;ay&quot;</span>;<br>endWord.append(reversalWord(inputWord,i));<br>endWord.append(breakWord);<br>&#125;<br><span class="hljs-keyword">return</span> endWord.toString();<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> inputWord;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reversalWord</span><span class="hljs-params">(String beforeWord,<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>String frontWord = beforeWord.substring(<span class="hljs-number">0</span>,index);<br>String breakWord = beforeWord.substring(index);<br><span class="hljs-keyword">return</span> breakWord.concat(frontWord);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOfVowel</span><span class="hljs-params">(String inputWord)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; inputWord.length();i++) &#123;<br><span class="hljs-keyword">if</span>(isVowel(inputWord.charAt(i))) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>String str = String.valueOf(ch);<br><span class="hljs-keyword">if</span>(str.equalsIgnoreCase(<span class="hljs-string">&quot;a&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;i&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;o&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;u&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料:</p><p>[]: <a href="https://www.cnblogs.com/rrttp/p/7922202.html">https://www.cnblogs.com/rrttp/p/7922202.html</a>    “char转化为String”<br>[]: <a href="http://blog.sina.com.cn/s/blog_4d2b0bdb0100qluy.html">http://blog.sina.com.cn/s/blog_4d2b0bdb0100qluy.html</a>    “儿童黑话介绍”<br>[]: <a href="https://www.cnblogs.com/mfrbuaa/p/3842271.html">https://www.cnblogs.com/mfrbuaa/p/3842271.html</a>    “相关代码参考”</p>]]></content>
    
    
    <summary type="html">一个挺有意思的语言加密</summary>
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="语言算法" scheme="https://llc-zh.github.io/tags/%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://llc-zh.github.io/2021/11/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://llc-zh.github.io/2021/11/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2021-11-07T02:10:59.000Z</published>
    <updated>2021-11-07T03:31:22.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github搭建博客原因："><a href="#Github搭建博客原因：" class="headerlink" title="Github搭建博客原因："></a>Github搭建博客原因：</h3><ol><li>进行自我技术沉淀，平复自己浮躁的心</li><li>向Github大佬学习</li><li>回顾来时的路，有利于进行自我总结</li><li>装逼</li></ol><h3 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h3><ul><li>通过博客来记录自己的学习和生活</li><li>锻炼自己写文章的能力</li><li>夯实自己的基础</li></ul><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><ul><li>希望自己能够坚持下去，不忘初心</li><li>将我的博客精神传递给我的子孙后代，永不熄灭的分享。</li></ul>]]></content>
    
    
    <summary type="html">正式开始我的githubpage之旅</summary>
    
    
    
    <category term="生活" scheme="https://llc-zh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="日常" scheme="https://llc-zh.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>20211003笔记</title>
    <link href="https://llc-zh.github.io/2021/10/03/20211003%E7%AC%94%E8%AE%B0/"/>
    <id>https://llc-zh.github.io/2021/10/03/20211003%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-03T10:09:36.000Z</published>
    <updated>2021-11-10T10:10:26.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、volatile详解"><a href="#一、volatile详解" class="headerlink" title="一、volatile详解"></a>一、volatile详解</h3><h4 id="1、volatile关键字的作用是什么？"><a href="#1、volatile关键字的作用是什么？" class="headerlink" title="1、volatile关键字的作用是什么？"></a>1、volatile关键字的作用是什么？</h4><h5 id="1-1-防重排序"><a href="#1-1-防重排序" class="headerlink" title="1.1 防重排序"></a>1.1 防重排序</h5><h5 id="1-2-实现可见性"><a href="#1-2-实现可见性" class="headerlink" title="1.2 实现可见性"></a>1.2 实现可见性</h5><h5 id="1-3-保证单次读-写操作具有原子性"><a href="#1-3-保证单次读-写操作具有原子性" class="headerlink" title="1.3 保证单次读/写操作具有原子性"></a>1.3 保证单次读/写操作具有原子性</h5><h4 id="2、volatile能保证原子性吗？"><a href="#2、volatile能保证原子性吗？" class="headerlink" title="2、volatile能保证原子性吗？"></a>2、volatile能保证原子性吗？</h4><p>​    不能保证完全的原子性</p><h4 id="3、之前32位机器上共享的long和double变量的为什么要用volatile-现在64位机器上是否也要设置呢？"><a href="#3、之前32位机器上共享的long和double变量的为什么要用volatile-现在64位机器上是否也要设置呢？" class="headerlink" title="3、之前32位机器上共享的long和double变量的为什么要用volatile?现在64位机器上是否也要设置呢？"></a>3、之前32位机器上共享的long和double变量的为什么要用volatile?现在64位机器上是否也要设置呢？</h4><ol><li>因为long和double两种数据类型的操作可分为高32位和低32位两部分，普通的long和double类型读/写可能不是原子的。把long和double变量设为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</li><li>现在64位机器不需要设置，因为在64位机器上单次读写操作都是原子的</li></ol><h4 id="4、i-为什么不能保证原子性？"><a href="#4、i-为什么不能保证原子性？" class="headerlink" title="4、i++为什么不能保证原子性？"></a>4、i++为什么不能保证原子性？</h4><p>​    i++其实是一个复合操作，包括三个步骤：</p><ul><li>读取i的值</li><li>对i加1</li><li>将i的值写回内存</li></ul><p>​    这三个步骤都有可能被中断，导致不能全部成功或全部失败</p><h4 id="5、volatile是如何实现可见性的？内存屏障。"><a href="#5、volatile是如何实现可见性的？内存屏障。" class="headerlink" title="5、volatile是如何实现可见性的？内存屏障。"></a>5、volatile是如何实现可见性的？内存屏障。</h4><p>​    在volatile前，先将系统内存的数据读到内部缓存（L1，L2或其他）后在进行操作，但操作完不知道何时会写到内存，</p><p>​    在volatile后，JVM就就会向处理器发送一条lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</p><p>​    【volatile变量的内存可见性是基于内存屏障实现的</p><p>​        内存屏障，又称内存栅栏，是一个cpu指令】</p><h4 id="6、volatile是如何实现有序性的？happens-before等"><a href="#6、volatile是如何实现有序性的？happens-before等" class="headerlink" title="6、volatile是如何实现有序性的？happens-before等"></a>6、volatile是如何实现有序性的？happens-before等</h4><ol><li>happens-before规则：volatile规则：对于一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>禁止重排序</li></ol><h4 id="7、说下volatile的应用场景？"><a href="#7、说下volatile的应用场景？" class="headerlink" title="7、说下volatile的应用场景？"></a>7、说下volatile的应用场景？</h4><ul><li>状态标志</li><li>一次性安全发布</li><li>独立观察</li><li>volatile bean模式</li><li>开销较低的读-写锁策略</li><li>双重检查</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、volatile详解&quot;&gt;&lt;a href=&quot;#一、volatile详解&quot; class=&quot;headerlink&quot; title=&quot;一、volatile详解&quot;&gt;&lt;/a&gt;一、volatile详解&lt;/h3&gt;&lt;h4 id=&quot;1、volatile关键字的作用是什么？&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="日常笔记" scheme="https://llc-zh.github.io/tags/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>http重定向与转发的区别</title>
    <link href="https://llc-zh.github.io/2021/09/15/http%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%BD%AC%E5%8F%91%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://llc-zh.github.io/2021/09/15/http%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%BD%AC%E5%8F%91%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-09-15T10:16:37.000Z</published>
    <updated>2021-11-10T10:19:00.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Http重定向和转发的区别"><a href="#Http重定向和转发的区别" class="headerlink" title="Http重定向和转发的区别"></a>Http重定向和转发的区别</h2><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ol><li><p>请求转发</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">request.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(request,response);<span class="hljs-comment">//转发到success.jsp</span><br></code></pre></td></tr></table></figure></li><li><p>请求重定向</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">response.sendRedirect(<span class="hljs-string">&quot;/response_war/img&quot;</span>);<span class="hljs-comment">//重定向到***/response_war/img地址</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h5><p>​    Request和Response的区别:</p><p>​    Web服务器在收到客户端的http请求，会针对每一次请求，分别创建一个用于代表请求的request对象，和代表响应的response对象。</p><p>​    故:当获取客户机提交过来的数据时，找request对象就行了</p><p>​        当需要向客户机输出数据，找response对象</p><h5 id="简而言之："><a href="#简而言之：" class="headerlink" title="简而言之："></a>简而言之：</h5><p>​                    request是服务端用来接受客户端的数据的</p><p>​                    response是服务端传送给客户端的数据，将数据展示给客户端看</p><p><img src="https://greenllrno.xyz/httpservlet.png" alt="httpservlet"></p><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>可以有五种类型取值:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">100~199<br>200~299(200:请求成功)<br>300~399(302:重定向304:读缓存)<br>400~499(404:未找到405：请求中指定的方法不被允许)<br>500~599(500:请求未完成504:网关错误)<br></code></pre></td></tr></table></figure><h3 id="转发与重定向的区别"><a href="#转发与重定向的区别" class="headerlink" title="转发与重定向的区别"></a>转发与重定向的区别</h3><ol><li>重定向两次请求，转发一次请求</li><li>重定向地址栏的地址变化，转发地址不变</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Http重定向和转发的区别&quot;&gt;&lt;a href=&quot;#Http重定向和转发的区别&quot; class=&quot;headerlink&quot; title=&quot;Http重定向和转发的区别&quot;&gt;&lt;/a&gt;Http重定向和转发的区别&lt;/h2&gt;&lt;h3 id=&quot;请求方式&quot;&gt;&lt;a href=&quot;#请求方式&quot;</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络编程" scheme="https://llc-zh.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(一)</title>
    <link href="https://llc-zh.github.io/2021/09/07/%E5%89%91%E6%8C%87offer-%E4%B8%80/"/>
    <id>https://llc-zh.github.io/2021/09/07/%E5%89%91%E6%8C%87offer-%E4%B8%80/</id>
    <published>2021-09-07T10:04:51.000Z</published>
    <updated>2021-11-10T10:06:23.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="剑指offer刷题（2021-9-7）"><a href="#剑指offer刷题（2021-9-7）" class="headerlink" title="剑指offer刷题（2021/9/7）"></a>剑指offer刷题（2021/9/7）</h3><h5 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h5><h5 id="JZ7-斐波那契数列"><a href="#JZ7-斐波那契数列" class="headerlink" title="JZ7    斐波那契数列"></a>JZ7    斐波那契数列</h5><p>斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。</p><p><em>n</em>≤39</p><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><blockquote><p>输入：    4</p><p>返回值：    3</p></blockquote><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise1;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> Fibonacci(n-<span class="hljs-number">1</span>)+Fibonacci(n-<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><span class="hljs-keyword">int</span> number = scan.nextInt();<br>System.out.println(Fibonacci(number));<br>&#125;<br>&#125;<br><span class="hljs-comment">/*复杂度分析：</span><br><span class="hljs-comment">时间复杂度：O(2^N)</span><br><span class="hljs-comment">空间复杂度：递归栈的空间</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h5><h5 id="JZ8-跳台阶（实际上符合斐波那契数列）"><a href="#JZ8-跳台阶（实际上符合斐波那契数列）" class="headerlink" title="JZ8 跳台阶（实际上符合斐波那契数列）"></a>JZ8 跳台阶（实际上符合斐波那契数列）</h5><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><blockquote><p>输入：    2</p><p>输出：    2</p></blockquote><h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><blockquote><p>输入：    7</p><p>输出：    21</p></blockquote><h5 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise1;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jumpFloor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(target&lt;=<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> jumpFloor(target-<span class="hljs-number">1</span>)+jumpFloor(target-<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><span class="hljs-keyword">int</span> number = scan.nextInt();<br>System.out.println(jumpFloor(number));<br>&#125;<br>&#125;<br><span class="hljs-comment">/*复杂度分析：</span><br><span class="hljs-comment">时间复杂度：O(2^N)</span><br><span class="hljs-comment">空间复杂度：递归栈的空间</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;剑指offer刷题（2021-9-7）&quot;&gt;&lt;a href=&quot;#剑指offer刷题（2021-9-7）&quot; class=&quot;headerlink&quot; title=&quot;剑指offer刷题（2021/9/7）&quot;&gt;&lt;/a&gt;剑指offer刷题（2021/9/7）&lt;/h3&gt;&lt;h5 i</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="剑指offer" scheme="https://llc-zh.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>20210801笔记</title>
    <link href="https://llc-zh.github.io/2021/08/01/20210801%E7%AC%94%E8%AE%B0/"/>
    <id>https://llc-zh.github.io/2021/08/01/20210801%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-01T10:11:37.000Z</published>
    <updated>2021-11-10T10:12:18.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20210801学习笔记"><a href="#20210801学习笔记" class="headerlink" title="20210801学习笔记"></a>20210801学习笔记</h1><h4 id="SimpleDateFormat（java工具类）"><a href="#SimpleDateFormat（java工具类）" class="headerlink" title="SimpleDateFormat（java工具类）"></a>SimpleDateFormat（java工具类）</h4><blockquote><p> SimpleDateFormat是一个格式化日期和解析日期的工具类。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yyyy：年<br>MM：月<br>dd：日<br>hh：1~12小时制(1-12)<br>HH：24小时制(0-23)<br>mm：分<br>ss：秒<br>S：毫秒<br>E：星期几<br>D：一年中的第几天<br>F：一月中的第几个星期(会把这个月总共过的天数除以7)<br>w：一年中的第几个星期<br>W：一月中的第几星期(会根据实际情况来算)<br>a：上下午标识<br>k：和HH差不多，表示一天24小时制(1-24)。<br>K：和hh差不多，表示一天12小时制(0-11)。<br>z：表示时区  <br></code></pre></td></tr></table></figure><p>SimpleDateFormat是线程不安全的，需要实现线程同步(即加线程同步锁)，synchronized(lock)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;20210801学习笔记&quot;&gt;&lt;a href=&quot;#20210801学习笔记&quot; class=&quot;headerlink&quot; title=&quot;20210801学习笔记&quot;&gt;&lt;/a&gt;20210801学习笔记&lt;/h1&gt;&lt;h4 id=&quot;SimpleDateFormat（java工具类）</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="日常笔记" scheme="https://llc-zh.github.io/tags/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>redis学习</title>
    <link href="https://llc-zh.github.io/2021/07/29/redis%E5%AD%A6%E4%B9%A0/"/>
    <id>https://llc-zh.github.io/2021/07/29/redis%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-29T10:14:44.000Z</published>
    <updated>2021-11-10T10:20:00.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h4 id="关系型数据库：MySQL，Oracle"><a href="#关系型数据库：MySQL，Oracle" class="headerlink" title="关系型数据库：MySQL，Oracle"></a>关系型数据库：MySQL，Oracle</h4><h4 id="文档型数据库：MongoDB"><a href="#文档型数据库：MongoDB" class="headerlink" title="文档型数据库：MongoDB"></a>文档型数据库：MongoDB</h4><h4 id="分布式文件系统：FastDFS"><a href="#分布式文件系统：FastDFS" class="headerlink" title="分布式文件系统：FastDFS"></a>分布式文件系统：FastDFS</h4><h4 id="搜索引擎：solr-elasticsearch"><a href="#搜索引擎：solr-elasticsearch" class="headerlink" title="搜索引擎：solr elasticsearch"></a>搜索引擎：solr elasticsearch</h4><h4 id="内存数据库：Redis-Tair、Memache…"><a href="#内存数据库：Redis-Tair、Memache…" class="headerlink" title="内存数据库：Redis Tair、Memache…"></a>内存数据库：Redis Tair、Memache…</h4><hr><h3 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h3><h4 id="kv键值对"><a href="#kv键值对" class="headerlink" title="kv键值对:"></a>kv键值对:</h4><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><h4 id="文档型数据库（bson格式和json一样）"><a href="#文档型数据库（bson格式和json一样）" class="headerlink" title="文档型数据库（bson格式和json一样）"></a>文档型数据库（bson格式和json一样）</h4><ul><li>MongoDB（一般必须掌握）<ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档！</li><li>MongoDB是一个介于关系型数据库和非关系型数据中中间的产品！MongoDB是非关系型数据库功能最丰富，最像关系型数据据库的！</li></ul></li><li>ConthDB</li></ul><h4 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h4><ul><li>HBase</li><li>分布式文件系统</li></ul><h4 id="图关系（Graph）数据库"><a href="#图关系（Graph）数据库" class="headerlink" title="图关系（Graph）数据库"></a>图关系（Graph）数据库</h4><ul><li>他不是存图形，存放的是关系（比如社交朋友圈，广告推荐）-&gt;图论</li><li>Neo4j，InfoGrid</li></ul><hr><p><img src="https://greenllrno.xyz/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="学习路线" title="全栈"></p><hr><h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Redis是什么?</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务</p><p>是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API</p><blockquote><p>Redis能干嘛?</p></blockquote><p>1、内存存储，持久化，内存中是断电即失，所以持久化很重要（rdb、aof）</p><p>2、效率高，可以用于高速缓存</p><p>3、发布订阅系统</p><p>4、地图信息分析</p><p>5、计时器、计数器（浏览量！）</p><p>6、……</p><blockquote><p>特性</p></blockquote><p>1、多样的数据类型</p><p>2、持久化</p><p>3、集群</p><p>4、事务</p><p>……</p><blockquote><p>Redis安装</p></blockquote><p>略</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>Linux下使用Redis</p></blockquote><ul><li><p>dockers容器下使用</p><ul><li>查看进项id<ul><li>docker ps</li></ul></li><li>进入Redis-cli客户端<ul><li>docker exec -it 5862ac8c1778 redis-cli    （5862ac8c1778 是进项id）</li><li>ping—&gt;pong（成功！！）</li></ul></li></ul></li><li><p> Redis客户端</p></li><li><p>```bash<br>127.0.0.1:6379&gt; keys *    #查看数据库所有的key</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><br>- ```bash<br>  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; dbsize<span class="hljs-comment">#查看数据库的大小</span><br>  (<span class="hljs-built_in">integer</span>) <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure></li><li><p>```bash<br>127.0.0.1:6379&gt; select 3    #切换数据库（总共有16个数据库，0~15）<br>OK<br>127.0.0.1:6379[3]&gt; </p><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">-</span> ```<span class="hljs-selector-tag">bash</span><br>  <span class="hljs-selector-tag">127</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>:<span class="hljs-selector-tag">6379</span><span class="hljs-selector-attr">[3]</span>&gt; <span class="hljs-selector-tag">flushdb</span>#清除当前数据库（<span class="hljs-selector-tag">flushall</span>删除全部数据库）<br>  <span class="hljs-selector-tag">OK</span><br>  <span class="hljs-selector-tag">127</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>:<span class="hljs-selector-tag">6379</span><span class="hljs-selector-attr">[3]</span>&gt; <span class="hljs-selector-tag">keys</span> *<br>  (empty array)<br></code></pre></td></tr></table></figure></li></ul><blockquote><p> Redis&gt;=6版本开始支持多线程</p></blockquote><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; exists name<span class="hljs-comment">#判断当前key是否存在</span><br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; move name 2<span class="hljs-comment">#移动当前的key到另一个库</span><br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[2]&gt; expire name 10<span class="hljs-comment">#设置key的过期时间，单位是秒</span><br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[2]&gt; ttl name<span class="hljs-comment">#查看当前key的剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; del name<span class="hljs-comment">#删除当前key</span><br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; <span class="hljs-built_in">type</span> name<span class="hljs-comment">#查看key的一个类型</span><br>string<br></code></pre></td></tr></table></figure><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; <span class="hljs-built_in">set</span> key1 v1<span class="hljs-comment">#设置值</span><br>OK<br>127.0.0.1:6379[1]&gt; get key1<span class="hljs-comment">#获得值</span><br><span class="hljs-string">&quot;v1&quot;</span><br>127.0.0.1:6379[1]&gt; exists key1<span class="hljs-comment">#判断某一个key是否存在</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; append key1 <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-comment">#追加对应key的value值，如果空-&gt;相当于set key，非空-&gt;添加值到value的结尾。</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379[1]&gt; get key1<br><span class="hljs-string">&quot;v1hello&quot;</span><br>127.0.0.1:6379[1]&gt; strlen key1<span class="hljs-comment">#返回key的string类型value的长度。如果key对应的非string类型，就返回错误。</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379[1]&gt; append key1 <span class="hljs-string">&quot;,llc&quot;</span><br>(<span class="hljs-built_in">integer</span>) 11<br>127.0.0.1:6379[1]&gt; get key1<br><span class="hljs-string">&quot;v1hello,llc&quot;</span><br>127.0.0.1:6379[1]&gt; strlen key1<br>(<span class="hljs-built_in">integer</span>) 11<br><span class="hljs-comment">############################################################################################################</span><br>127.0.0.1:6379[1]&gt; <span class="hljs-built_in">set</span> views 0<span class="hljs-comment">#初始浏览量为0</span><br>OK<br>127.0.0.1:6379[1]&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br>127.0.0.1:6379[1]&gt; incr views<span class="hljs-comment">#自增1</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; incr views<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379[1]&gt; get views<br><span class="hljs-string">&quot;2&quot;</span><br>127.0.0.1:6379[1]&gt; decr views<span class="hljs-comment">#自减1</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; decr views<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; decr views<br>(<span class="hljs-built_in">integer</span>) -1<br>127.0.0.1:6379[1]&gt; get views<br><span class="hljs-string">&quot;-1&quot;</span><br>127.0.0.1:6379[1]&gt; incrby views 10<span class="hljs-comment">#可以设置步长，指定增量</span><br>(<span class="hljs-built_in">integer</span>) 9<br>127.0.0.1:6379[1]&gt; incrby views 10<br>(<span class="hljs-built_in">integer</span>) 19<br>127.0.0.1:6379[1]&gt; decrby views 10<br>(<span class="hljs-built_in">integer</span>) 9<br>127.0.0.1:6379[1]&gt; decrby views 5<br>(<span class="hljs-built_in">integer</span>) 4<br><span class="hljs-comment">############################################################################################################</span><br><span class="hljs-comment">#字符串范围 range</span><br>127.0.0.1:6379[1]&gt; <span class="hljs-built_in">set</span> key1 <span class="hljs-string">&quot;hello,llc&quot;</span><br>OK<br>127.0.0.1:6379[1]&gt; get key1<br><span class="hljs-string">&quot;hello,llc&quot;</span><br>127.0.0.1:6379[1]&gt; getrange key1 0 3<span class="hljs-comment">#截取字符串 [0,3]</span><br><span class="hljs-string">&quot;hell&quot;</span><br>127.0.0.1:6379[1]&gt; getrange key1 0 -1<span class="hljs-comment">#获取全部的字符串，和get key是一样的</span><br><span class="hljs-string">&quot;hello,llc&quot;</span><br><br><span class="hljs-comment">#替换</span><br>127.0.0.1:6379[1]&gt; <span class="hljs-built_in">set</span> key2 abcdefg<br>OK<br>127.0.0.1:6379[1]&gt; get key2<br><span class="hljs-string">&quot;abcdefg&quot;</span><br>127.0.0.1:6379[1]&gt; setrange key2 1 xx<span class="hljs-comment">#替换指定位置开始的字符串</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379[1]&gt; get key2<br><span class="hljs-string">&quot;axxdefg&quot;</span><br><span class="hljs-comment">############################################################################################################</span><br><span class="hljs-comment"># setex（set with expire）#设置过期时间</span><br><span class="hljs-comment"># setnx（set if not exist）#将key设置值为value，如果key不存在，这种情况下等同SET命令。 当key存在时，什么也不做。</span><br><br>127.0.0.1:6379[1]&gt; setex key3 30 <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-comment">#设置key3的值为hello，30秒后过期</span><br>OK<br>127.0.0.1:6379[1]&gt; ttl key3<br>(<span class="hljs-built_in">integer</span>) 25<br>127.0.0.1:6379[1]&gt; get key3<br>(nil)<br>127.0.0.1:6379[1]&gt; ttl key3<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6379[1]&gt; setnx mykey <span class="hljs-string">&quot;redis&quot;</span>   <span class="hljs-comment">#如果mykey不存在，创建mykey</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; keys *<br>1) <span class="hljs-string">&quot;key1&quot;</span><br>2) <span class="hljs-string">&quot;mykey&quot;</span><br>3) <span class="hljs-string">&quot;key2&quot;</span><br>127.0.0.1:6379[1]&gt; setnx mykey <span class="hljs-string">&quot;MongoDB&quot;</span><span class="hljs-comment">#如果mykey存在，创建失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; get mykey<br><span class="hljs-string">&quot;redis&quot;</span><br><span class="hljs-comment">############################################################################################################</span><br><span class="hljs-comment"># MSET 对应给定的keys到他们相应的values上。MSET会用新的value替换已经存在的value，就像普通的SET命令一样。如果你不想覆盖已经存在的values，请参看命令MSETNX。MSET是原子的，所以所有给定的keys是一次性set的。客户端不可能看到这种一部分keys被更新而另外的没有改变的情况。</span><br><br><span class="hljs-comment"># MGET 返回所有指定的key的value。对于每个不对应string或者不存在的key，都返回特殊值nil。正因为此，这个操作从来不会失败。</span><br><br><span class="hljs-comment"># MSETNX 对应给定的keys到他们相应的values上。只要有一个key已经存在，MSETNX一个操作都不会执行。 由于这种特性，MSETNX可以实现要么所有的操作都成功，要么一个都不执行，这样可以用来设置不同的key，来表示一个唯一的对象的不同字段。MSETNX是原子的，所以所有给定的keys是一次性set的。客户端不可能看到这种一部分keys被更新而另外的没有改变的情况。</span><br><br>127.0.0.1:6379[1]&gt; mset k1 v1 k2 v2 k3 v3<br>OK<br>127.0.0.1:6379[1]&gt; mget k1 k2 k3<br>1) <span class="hljs-string">&quot;v1&quot;</span><br>2) <span class="hljs-string">&quot;v2&quot;</span><br>3) <span class="hljs-string">&quot;v3&quot;</span><br>127.0.0.1:6379[1]&gt; msetnx k1 v1 k4 v4<span class="hljs-comment">#原子性操作，要么一起成功，要么一起失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; get k4<br>(nil)<br><br><span class="hljs-comment">#对象（貌似可以做到细粒度查询）</span><br>127.0.0.1:6379[1]&gt; <span class="hljs-built_in">set</span> user:2 &#123;name:lisi,age:6&#125;<span class="hljs-comment">#设置一个user:2 对象 值为json字符来保存一个对象</span><br>OK<br>127.0.0.1:6379[1]&gt; get user:2<br><span class="hljs-string">&quot;&#123;name:lisi,age:6&#125;&quot;</span><br><br><span class="hljs-comment">#key设计：user:&#123;id&#125;:&#123;filed&#125;</span><br><br>127.0.0.1:6379[1]&gt; mset user:1:name zhangsan user:1:age 2<span class="hljs-comment">#key当作一个对象</span><br>OK<br>127.0.0.1:6379[1]&gt; mget user:1:name user:1:age<br>1) <span class="hljs-string">&quot;zhangsan&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-comment">############################################################################################################</span><br>getset <span class="hljs-comment">#先get后set</span><br>127.0.0.1:6379[1]&gt; getset db redis<span class="hljs-comment">#如果不存在值，则返回nil</span><br>(nil)<br>127.0.0.1:6379[1]&gt; get db<br><span class="hljs-string">&quot;redis&quot;</span><br>127.0.0.1:6379[1]&gt; getset db mongodb  <span class="hljs-comment">#如果存在值，获取原来的值，并设置新值</span><br><span class="hljs-string">&quot;redis&quot;</span><br>127.0.0.1:6379[1]&gt; get db<br><span class="hljs-string">&quot;mongodb&quot;</span><br></code></pre></td></tr></table></figure><h3 id="List（列表，实际上是一个双向链表）"><a href="#List（列表，实际上是一个双向链表）" class="headerlink" title="List（列表，实际上是一个双向链表）"></a>List（列表，实际上是一个双向链表）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; lpush list one<span class="hljs-comment">#将一个值或多个值插入到表头部</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; lpush list two<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379[1]&gt; lpush list three<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379[1]&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379[1]&gt; lrange list 0 1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379[1]&gt; lrange list 0 0<br>1) <span class="hljs-string">&quot;three&quot;</span><br>127.0.0.1:6379[1]&gt; rpush list right<span class="hljs-comment">#将一个值或多个值插入到列表尾部</span><br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379[1]&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>4) <span class="hljs-string">&quot;right&quot;</span><br><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; LPOP list<span class="hljs-comment">#移除list的第一个元素</span><br><span class="hljs-string">&quot;three&quot;</span><br>127.0.0.1:6379[1]&gt; RPOP list<span class="hljs-comment">#移除list的最后一个元素</span><br><span class="hljs-string">&quot;right&quot;</span><br>127.0.0.1:6379[1]&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; LINDEX list 0<span class="hljs-comment">#通过下标获取list中的值</span><br><span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379[1]&gt; LINDEX list 1<br><span class="hljs-string">&quot;one&quot;</span><br><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; LPUSH list one two three<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379[1]&gt; LLEN list<span class="hljs-comment">#返回列表的长度</span><br>(<span class="hljs-built_in">integer</span>) 3<br><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;three&quot;</span><br>3) <span class="hljs-string">&quot;two&quot;</span><br>4) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379[1]&gt; LREM list 2 three<span class="hljs-comment">#移除list集合中指定个数的value，精确匹配</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379[1]&gt; LREM list 1 one<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; RPUSH list hello hello1 hello2 hello3<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379[1]&gt; LTRIM list 2 3<span class="hljs-comment">#通过下标截取指定的长度，这个list已经被改变了，截断了只剩下截取的元素！</span><br>OK<br>127.0.0.1:6379[1]&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;hello2&quot;</span><br>2) <span class="hljs-string">&quot;hello3&quot;</span><br><span class="hljs-comment">########################################################################################################### </span><br>127.0.0.1:6379[1]&gt; rpush list hi hi1 hi2 hi3<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379[1]&gt; RPOPLPUSH list mylist<br><span class="hljs-string">&quot;hi3&quot;</span><br>127.0.0.1:6379[1]&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;hi&quot;</span><br>2) <span class="hljs-string">&quot;hi1&quot;</span><br>3) <span class="hljs-string">&quot;hi2&quot;</span><br>127.0.0.1:6379[1]&gt; lrange mylist 0 -1<br>1) <span class="hljs-string">&quot;hi3&quot;</span><br>127.0.0.1:6379[1]&gt; rpoplpush list mylist<span class="hljs-comment">#移除列表的最后一个元素，将它移动到新的列表中</span><br><span class="hljs-string">&quot;hi2&quot;</span><br>127.0.0.1:6379[1]&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;hi&quot;</span><br>2) <span class="hljs-string">&quot;hi1&quot;</span><br>127.0.0.1:6379[1]&gt; lrange mylist 0 -1<br>1) <span class="hljs-string">&quot;hi2&quot;</span><br>2) <span class="hljs-string">&quot;hi3&quot;</span><br><span class="hljs-comment">###########################################################################################################</span><br>EXISTS key [key ...]<span class="hljs-comment">#返回key是否存在。</span><br>LSET key index value<span class="hljs-comment">#通过索引设置列表元素的值</span><br>LINSERT key BEFORE|AFTER pivot value<span class="hljs-comment">#在列表的元素前或者后插入元素</span><br></code></pre></td></tr></table></figure><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">SADD key member1 [member2]<br><span class="hljs-comment">#向集合添加一个或多个成员</span><br><br>SCARD key<br><span class="hljs-comment">#获取集合的成员数</span><br><br>SMEMBERS key<br><span class="hljs-comment">#返回集合中的所有成员</span><br><br>SISMEMBER key member<br><span class="hljs-comment">#判断 member 元素是否是集合 key 的成员</span><br><br>SREM key member1 [member2]<br><span class="hljs-comment">#移除集合中一个或多个成员</span><br><br>SRANDMEMBER key [count]<br><span class="hljs-comment">#返回集合中一个或多个随机数</span><br><br>SPOP key<br><span class="hljs-comment">#移除并返回集合中的一个随机元素</span><br><br>SMOVE <span class="hljs-built_in">source</span> destination member<br><span class="hljs-comment">#将 member 元素从 source 集合移动到 destination 集合</span><br><br>SDIFF key1 [key2]<br><span class="hljs-comment">#返回第一个集合与其他集合之间的差异。</span><br><br>SINTER key1 [key2]<br><span class="hljs-comment">#返回给定所有集合的交集</span><br><br>SUNION key1 [key2]<br><span class="hljs-comment">#返回所有给定集合的并集</span><br></code></pre></td></tr></table></figure><h3 id="Hash-哈希map"><a href="#Hash-哈希map" class="headerlink" title="Hash(哈希map)"></a>Hash(哈希map)</h3><p>Map集合，key-Map</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">HSET key field value<br><span class="hljs-comment">#将哈希表 key 中的字段 field 的值设为 value 。</span><br><br>HGET key field<br><span class="hljs-comment">#获取存储在哈希表中指定字段的值。</span><br><br>HLEN key<br><span class="hljs-comment">#获取哈希表中字段的数量</span><br><br>HEXISTS key field<br><span class="hljs-comment">#查看哈希表 key 中，指定的字段是否存在。</span><br><br>HKEYS key<br><span class="hljs-comment">#获取所有哈希表中的字段</span><br><br>HVALS key<br><span class="hljs-comment">#获取哈希表中所有值。</span><br><br>HINCRBY key field increment<br><span class="hljs-comment">#为哈希表 key 中的指定字段的整数值加上增量 increment 。</span><br><br>HSETNX key field value<br><span class="hljs-comment">#只有在字段 field 不存在时，设置哈希表字段的值。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h2&gt;&lt;h4 id=&quot;关系型数据库：MySQL，Oracle&quot;&gt;&lt;a href=&quot;#关系型数据库：MySQL，Oracle&quot; class=&quot;he</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://llc-zh.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>多线程学习(一)</title>
    <link href="https://llc-zh.github.io/2021/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>https://llc-zh.github.io/2021/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%B8%80/</id>
    <published>2021-07-25T10:01:37.000Z</published>
    <updated>2021-11-10T10:03:56.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java多线程实现有三种方式"><a href="#java多线程实现有三种方式" class="headerlink" title="java多线程实现有三种方式"></a>java多线程实现有三种方式</h3><ul><li>继承自Thread类，重写run()方法**[编写线程执行体]**，子类对象.start()<strong>启动线程</strong></li></ul><p>声明继承自Thread类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span><br></code></pre></td></tr></table></figure><p>重写run()方法,重写线程执行体</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在划水---&quot;</span>+i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动线程</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">demo3 dem = <span class="hljs-keyword">new</span> demo3();<br>dem.start();<br></code></pre></td></tr></table></figure><ul><li>实现Runnable接口,传入目标对象+Thread对象.start()</li></ul><p>声明实现了Runnable接口</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span><br></code></pre></td></tr></table></figure><p>重写run()方法,重写线程执行体</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在划水---&quot;</span>+i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动线程</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">TestThread2 testThread2 = <span class="hljs-keyword">new</span> TestThread2();<br><br><span class="hljs-comment">//Thread thread = new Thread(testThread2);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//thread.start();</span><br><br><span class="hljs-keyword">new</span> Thread(testThread2).start();<br></code></pre></td></tr></table></figure><ul><li>实现Callable接口(了解即可)</li></ul><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ol><li>真实对象和代理对象都要实现同一个接口</li><li>代理对象要代理真实对象</li><li>代理对象可以做真实对象很多做不了的事情</li><li>真实对象可以专注做自己的事情</li><li>代理类需要自己编写代码生成</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Marry</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//真实对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Marry</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;秦老师要结婚了，超开心&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//代理对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeddingCompany</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Marry</span></span>&#123;<br><br><span class="hljs-keyword">private</span> Marry target;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeddingCompany</span><span class="hljs-params">(Marry target)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.target = target;<br>&#125;<br><br>    <span class="hljs-comment">//不论是谁结婚,都可以套用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>before();<br><span class="hljs-keyword">this</span>.target.HappyMarry();<br>after();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;结婚之前,布置结婚现场&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;结婚之后,收尾款&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h4><p>在不修改被代理对象的源码的前提下，进行功能增强。</p><h4 id="任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。"><a href="#任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。" class="headerlink" title="任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。"></a>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</h4><h4 id="对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。"><a href="#对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。" class="headerlink" title="对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。"></a>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</h4><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><ol><li>sleep (时间) 指定当前线程<strong>阻塞</strong>的<strong>毫秒</strong>数；</li><li>sleep存在异常<strong>InterruptedException</strong>；</li><li>sleep<strong>时间达到后</strong>线程进入<strong>就绪状态</strong>；</li><li><strong>每一个对象</strong>都有一个<strong>锁</strong>，sleep<strong>不会释放锁</strong>；</li></ol><h4 id="线程让步"><a href="#线程让步" class="headerlink" title="线程让步"></a>线程让步</h4><h4 id="线程优先级设置-只是运行概率，没啥鸟用"><a href="#线程优先级设置-只是运行概率，没啥鸟用" class="headerlink" title="线程优先级设置(只是运行概率，没啥鸟用)"></a>线程优先级设置(只是运行概率，没啥鸟用)</h4><h4 id="线程分为用户线程和守护线程（后台记录操作日志，监控内存，垃圾回收）"><a href="#线程分为用户线程和守护线程（后台记录操作日志，监控内存，垃圾回收）" class="headerlink" title="线程分为用户线程和守护线程（后台记录操作日志，监控内存，垃圾回收）"></a>线程分为用户线程和守护线程（后台记录操作日志，监控内存，垃圾回收）</h4><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步    {"></a>线程同步    {</h3><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>​    synchronized方法<strong>控制对 “对象” 的访问</strong> , <strong>每个对象对应一把锁</strong> , 每个<br>​    synchronized方法都必须<strong>获得调用该方法的对象的锁</strong>才能执行 , 否则线程会阻塞 ,<br>​    <strong>方法一旦执行 , 就独占该锁</strong> , 直到<strong>该方法返回才释放锁</strong> , <strong>后面被阻塞的线程才能获</strong><br>​    <strong>得这个锁 , 继续执行</strong></p><h4 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h4><h3 id=""><a href="#" class="headerlink" title="}"></a>}</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;java多线程实现有三种方式&quot;&gt;&lt;a href=&quot;#java多线程实现有三种方式&quot; class=&quot;headerlink&quot; title=&quot;java多线程实现有三种方式&quot;&gt;&lt;/a&gt;java多线程实现有三种方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;继承自Thread类，重写run</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="多线程" scheme="https://llc-zh.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java稀疏数组</title>
    <link href="https://llc-zh.github.io/2021/07/04/java%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://llc-zh.github.io/2021/07/04/java%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-04T10:12:54.000Z</published>
    <updated>2021-11-10T10:13:59.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java稀疏数组"><a href="#java稀疏数组" class="headerlink" title="java稀疏数组"></a>java稀疏数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-keyword">int</span> chessArr1[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>    chessArr1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    chessArr1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br>    chessArr1[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">2</span>;<br>    chessArr1[<span class="hljs-number">5</span>][<span class="hljs-number">8</span>] = <span class="hljs-number">6</span>;<br>    chessArr1[<span class="hljs-number">6</span>][<span class="hljs-number">8</span>] = <span class="hljs-number">6</span>;<br>    chessArr1[<span class="hljs-number">7</span>][<span class="hljs-number">8</span>] = <span class="hljs-number">6</span>;<br>    chessArr1[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>] = <span class="hljs-number">6</span>;<br>    chessArr1[<span class="hljs-number">9</span>][<span class="hljs-number">8</span>] = <span class="hljs-number">6</span>;<br>    System.out.println(<span class="hljs-string">&quot;原始的二维数组~~~&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] row: chessArr1) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> data:row) &#123;<br>    System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>    &#125;<br>    System.out.println();<br>    &#125;<br>    <span class="hljs-keyword">int</span> sum =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">11</span>;j++) &#123;<br>    <span class="hljs-keyword">if</span>(chessArr1[i][j]!=<span class="hljs-number">0</span>) &#123;<br>    sum++;<br>    &#125;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> sparseArr[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>    sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;<br>    sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;<br>    sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br>    <br>    <span class="hljs-keyword">int</span> count =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">11</span>;j++) &#123;<br>    <span class="hljs-keyword">if</span>(chessArr1[i][j]!=<span class="hljs-number">0</span>) &#123;<br>    count++;<br>    sparseArr[count][<span class="hljs-number">0</span>]=i;<br>    sparseArr[count][<span class="hljs-number">1</span>]=j;<br>    sparseArr[count][<span class="hljs-number">2</span>]=chessArr1[i][j];<br>    &#125;<br>    &#125;<br>    &#125;<br>    System.out.println();<br>    System.out.println(<span class="hljs-string">&quot;得到稀疏数组 为~~~&quot;</span>);<br>    System.out.printf(<span class="hljs-string">&quot;%s\t%s\t%s\t\n&quot;</span>,<span class="hljs-string">&quot;行&quot;</span>,<span class="hljs-string">&quot;列&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;sparseArr.length;i++) &#123;<br>    System.out.printf(<span class="hljs-string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArr[i][<span class="hljs-number">0</span>],sparseArr[i][<span class="hljs-number">1</span>],sparseArr[i][<span class="hljs-number">2</span>]);<br>    &#125;<br>    System.out.println();<br>    <span class="hljs-keyword">int</span> chessArr2[][]= <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;sparseArr.length;i++) &#123;<br>    chessArr2[sparseArr[i][<span class="hljs-number">0</span>]][sparseArr[i][<span class="hljs-number">1</span>]]=sparseArr[i][<span class="hljs-number">2</span>];<br>    &#125;<br>    System.out.println();<br>    System.out.println(<span class="hljs-string">&quot;恢复后的二维数组&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> [] row: chessArr2) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> data:row) &#123;<br>    System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>    &#125;<br>    System.out.println();<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java稀疏数组&quot;&gt;&lt;a href=&quot;#java稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;java稀疏数组&quot;&gt;&lt;/a&gt;java稀疏数组&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="学习" scheme="https://llc-zh.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="日常笔记" scheme="https://llc-zh.github.io/tags/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
