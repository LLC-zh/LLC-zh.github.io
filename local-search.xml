<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>三维张量轴变换(numpy的transpose方法)</title>
    <link href="/2022/01/27/%E4%B8%89%E7%BB%B4%E5%BC%A0%E9%87%8F%E8%BD%B4%E5%8F%98%E6%8D%A2-numpy%E7%9A%84transpose%E6%96%B9%E6%B3%95/"/>
    <url>/2022/01/27/%E4%B8%89%E7%BB%B4%E5%BC%A0%E9%87%8F%E8%BD%B4%E5%8F%98%E6%8D%A2-numpy%E7%9A%84transpose%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近在预习数据挖掘算法，学习numpy时，接触到一个概念，叫三维张量，在查阅资料和自己思考后，我终于搞明白这个东西了。但是我觉得网上的关于三维张量的资料比较少，而且大多都是介绍三维张量是什么，关于三维张量的轴变换的过程基本上都是略过，所以我写下了这篇文章来介绍三维张量的轴变换，也是对我思考成果的一个巩固。</p><p>大学学过的线性代数中的矩阵一般都是二维的，比如这样一个三阶矩阵:<br>(1 2 3<br>4 5 6<br>7 8 9),<br>从几何学的角度来看，我认为它是一个二维平面空间，</p><p>那么如何表示多维矩阵(张量)?比如三维矩阵，我们看一下下面这张图:</p><p><img src="https://pic1.zhimg.com/80/v2-94f7732383f7b46a0c2ec5108e1fe088_720w.jpg" alt="三维张量"></p><p>从这张图中，可以看出这个正方体的每一个”横向切面“都是一个二维矩阵，这些”横向切面“堆叠在一起就构成了”三维矩阵“，也就是三维张量。</p><p>这个三维张量在numpy中用ndarray对象来表示就是：</p><p>[[[9 1 8]<br>[6 7 5]<br>[3 4 2]]</p><p>[[2 9 1]<br>[8 6 7]<br>[5 3 4]]</p><p>[[1 5 9]<br>[7 2 6]<br>[4 8 3]]]</p><p>那么重点来了，我们如何进行三维张量的轴变换？以上面这个[3, 3, 3]三维张量为例，定义0为x轴，1为y轴，2为z轴</p><p><img src="https://img-blog.csdnimg.cn/20200915120021432.png" alt="坐标系"></p><p>对0轴和1轴进行变换：</p><p>我们可以想象成是关于2轴方向对正方体进行”切片“，那么切下来的这些片分别是：</p><p>(9 1 8<br>2 9 1<br>1 5 9)</p><p>(6 7 5<br>8 6 7<br>7 2 6)</p><p>(3 4 2<br>5 3 4<br>4 8 3),</p><p>再把这些片按顺序自上往下堆叠起来，就完成了0轴和1轴的变换。其他情况下的轴变换以此类比。</p><p>参考资料：</p><p><a href="https://www.cnblogs.com/caizhou520/p/11227986.html">numpy中的transpose函数使用方法</a></p><p><a href="https://zhuanlan.zhihu.com/p/140260245">什么是张量</a></p><p><a href="https://www.cnblogs.com/kehao/p/14579860.html">tensorflow2.0张量的维度变换</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>三维张量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/2021/12/24/Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/12/24/Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="1-1-Python数学操作符"><a href="#1-1-Python数学操作符" class="headerlink" title="1.1  Python数学操作符"></a>1.1  Python数学操作符</h3><ul><li>操作符：**    操作：指数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> ** <span class="hljs-number">9</span><br><span class="hljs-number">512</span><br></code></pre></div></td></tr></table></figure><ul><li>操作符：%    操作：取模/取余数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> % <span class="hljs-number">3</span><br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><ul><li>操作符：//    操作：整除/商数取整(相当于除法只保留小数点前的结果)</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> // <span class="hljs-number">3</span><br><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><ul><li>操作符：/     操作：除法</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> / <span class="hljs-number">3</span><br><span class="hljs-number">2.3333333333333335</span><br></code></pre></div></td></tr></table></figure><ul><li>操作符：*    操作：乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> * <span class="hljs-number">3</span><br><span class="hljs-number">21</span><br></code></pre></div></td></tr></table></figure><ul><li>操作符：+    操作：加法</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> + <span class="hljs-number">3</span><br><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><ul><li>操作符：-    操作：减法</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span> - <span class="hljs-number">3</span><br><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="1-2-整型、浮点型和字符串数据类型"><a href="#1-2-整型、浮点型和字符串数据类型" class="headerlink" title="1.2  整型、浮点型和字符串数据类型"></a>1.2  整型、浮点型和字符串数据类型</h3><table><thead><tr><th align="center">数据类型</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">整型</td><td align="center">-2、-1、0、1、2、3、4、5</td></tr><tr><td align="center">浮点型</td><td align="center">-1.25、-1.0、-0.5、0.0、0.5、1.0、1.25</td></tr><tr><td align="center">字符串</td><td align="center">‘a’、’aa’、’aaa’、’Hello!’、’11 cats’</td></tr></tbody></table><p><em>Python文本值，称为“字符串”或strs。总是用单引号包围住字符串(‘Hello’,也可以是中文，’你好’，一个中文在GBK编码下占两个字节，UTF-8下占3个字节)</em></p><hr><h3 id="1-3-字符串的连接和复制"><a href="#1-3-字符串的连接和复制" class="headerlink" title="1.3  字符串的连接和复制"></a>1.3  字符串的连接和复制</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Alice&#x27;</span> + <span class="hljs-string">&#x27;Bob&#x27;</span><br><span class="hljs-string">&#x27;AliceBob&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;你好&#x27;</span> + <span class="hljs-string">&#x27;世界&#x27;</span><br><span class="hljs-string">&#x27;你好世界&#x27;</span><br></code></pre></div></td></tr></table></figure><p>该表达式求值为一个新字符串，包含了两个字符串的文本。在我理解看来，有点类似于Java中的append，但明显python更为简单方便。</p><p>但是不能将字符串和一个整型值连接在一起，如果用+操作符连接在一起，python就不知道如何处理，他将显示一条错误的信息:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Alice&#x27;</span> + <span class="hljs-number">42</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#12&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-string">&#x27;Alice&#x27;</span> + <span class="hljs-number">42</span><br>TypeError: can only concatenate <span class="hljs-built_in">str</span> (<span class="hljs-keyword">not</span> <span class="hljs-string">&quot;int&quot;</span>) to <span class="hljs-built_in">str</span><br></code></pre></div></td></tr></table></figure><p>注意TypeError给出的信息，表示Python认为你试图将一个整数连接到字符串’Alice’。代码必须显式地将整数转换为字符串，因为Python不能自动完成转换。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#可以用str()显式的将42转换成&#x27;42&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Alice&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">42</span>)<br><span class="hljs-string">&#x27;Alice42&#x27;</span><br></code></pre></div></td></tr></table></figure><p>*操作符将两个整型或浮点型值相乘。但如果*操作符用于一个字符串值和一个整数值，它就变成了“字符串复制”操作符。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Alice&#x27;</span> * <span class="hljs-number">5</span><br><span class="hljs-string">&#x27;AliceAliceAliceAliceAlice&#x27;</span><br></code></pre></div></td></tr></table></figure><p>该表达式求值为一个字符串，它将原来的字符串复制若干次，次数就是整型的值。</p><p>*操作符只能用于两个数字（作为乘法），或一个字符串和一个整型值（作为“字符串复制”操作符。否则，Python将显示错误信息）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Alice&#x27;</span> * <span class="hljs-string">&#x27;Bob&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#15&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-string">&#x27;Alice&#x27;</span> * <span class="hljs-string">&#x27;Bob&#x27;</span><br>TypeError: can<span class="hljs-string">&#x27;t multiply sequence by non-int of type &#x27;</span>st<span class="hljs-string">r&#x27;</span><br><span class="hljs-string">&gt;&gt;&gt; &#x27;</span>Alice<span class="hljs-string">&#x27; * 5.0</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;pyshell#16&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">    &#x27;</span>Alice<span class="hljs-string">&#x27; * 5.0</span><br><span class="hljs-string">TypeError: can&#x27;</span>t multiply sequence by non-<span class="hljs-built_in">int</span> of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span><br></code></pre></div></td></tr></table></figure><p>你不能把两个单词（句子）相乘，也很难将一个任意字符串复制小数次。</p><hr><h3 id="1-4-在变量中保存值"><a href="#1-4-在变量中保存值" class="headerlink" title="1.4  在变量中保存值"></a>1.4  在变量中保存值</h3><p>“变量”就像计算机内存中的一个盒子，其中可以存放一个值。</p><h4 id="1-4-1-赋值语句"><a href="#1-4-1-赋值语句" class="headerlink" title="1.4.1  赋值语句"></a>1.4.1  赋值语句</h4><p>等号又被称为赋值操作符，将等号右边的值赋给左边</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>spam = <span class="hljs-number">40</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>spam<br><span class="hljs-number">40</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>eggs = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>spam + eggs<br><span class="hljs-number">42</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>spam + eggs + spam<br><span class="hljs-number">82</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>spam = spam + <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>spam<br><span class="hljs-number">42</span><br></code></pre></div></td></tr></table></figure><p>可以理解为在计算机内存中创建了一个名为’spam’的盒子（开辟内存空间），这个盒子存放在内存的某个地址，而这个盒子中又存放了一个值，这个值是40.</p><p>最后一个spam = spam + 2，并不是直接在老值40加上2，而是将算术得到的42直接覆写到spam变量中去，相当于把40丢掉，把42塞进去。</p><h4 id="1-4-2-变量名"><a href="#1-4-2-变量名" class="headerlink" title="1.4.2  变量名"></a>1.4.2  变量名</h4><table><thead><tr><th align="center">有效的变量名</th><th align="center">无效的变量名</th></tr></thead><tbody><tr><td align="center">current_balance</td><td align="center">current-balance(不允许短横线)</td></tr><tr><td align="center">currentBalance</td><td align="center">current balance(不允许空格)</td></tr><tr><td align="center">account4</td><td align="center">4account(不允许数字开头)</td></tr><tr><td align="center">_42</td><td align="center">42(不允许数字开头)</td></tr><tr><td align="center">TOTAL_SUM</td><td align="center">TOTAL_$SUM(不允许$这样的特殊字符)</td></tr><tr><td align="center">hello</td><td align="center">‘hello’(不允许’这样的特殊字符)</td></tr></tbody></table><ol><li>只能是一个词，不带空格</li><li>只能包含字母、数字和下划线字符</li><li>不能以数字开头</li></ol><p>变量名是区分大小写的，这意味这spam,sPam,SPAM,Spam是不同的变量。规范的变量命名应采用驼峰命名或下划线分割命名。（lookLikeThis,look_like_this）</p><hr><h3 id="1-5-一个程序"><a href="#1-5-一个程序" class="headerlink" title="1.5  一个程序"></a>1.5  一个程序</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#这是注释</span><br><span class="hljs-comment">#这是一个简单的程序，向世界说hello，叫出你的名字</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的名字是什么？&#x27;</span>)<br><br>myName = <span class="hljs-built_in">input</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;很高兴遇到你，&#x27;</span> + myName)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的名字一共长：&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(myName)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的年龄是：&#x27;</span>)<br><br>myAge = <span class="hljs-built_in">input</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;明年你就要&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(myAge)+<span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;岁了&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>程序执行结果</p><table><thead><tr><th>Hello World!<br/>你的名字是什么？<br/>李浴缸<br/>很高兴遇到你，李浴缸<br/>你的名字一共长：3<br/>你的年龄是：<br/>21<br/>明年你就要22岁了</th></tr></thead></table><h4 id="1-5-1-print-函数"><a href="#1-5-1-print-函数" class="headerlink" title="1.5.1  print()函数"></a>1.5.1  print()函数</h4><p>print()函数将括号内的字符串输出在屏幕上</p><h4 id="1-5-2-input-函数"><a href="#1-5-2-input-函数" class="headerlink" title="1.5.2  input()函数"></a>1.5.2  input()函数</h4><p>input()函数等待用户在键盘上输入一些文本，并按回车键</p><h4 id="1-5-3-len-函数"><a href="#1-5-3-len-函数" class="headerlink" title="1.5.3  len()函数"></a>1.5.3  len()函数</h4><p>求出括号内字符串中字符的个数</p><hr><h3 id="1-6-str-、int-、float-函数"><a href="#1-6-str-、int-、float-函数" class="headerlink" title="1.6  str()、int()、float()函数"></a>1.6  str()、int()、float()函数</h3><p> str()、int()、float()函数将分别求值为传入值的字符串、整数、浮点数的形式。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(<span class="hljs-number">4.0</span>)<br><span class="hljs-string">&#x27;4.0&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(-<span class="hljs-number">3.14</span>)<br><span class="hljs-string">&#x27;-3.14&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;42&#x27;</span>)<br><span class="hljs-number">42</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">1.25</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>)<br><span class="hljs-number">3.14</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">10</span>)<br><span class="hljs-number">10.0</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>儿童黑话(Pig Latin)语言加密算法</title>
    <link href="/2021/11/09/%E5%84%BF%E7%AB%A5%E9%BB%91%E8%AF%9D-Pig-Latin/"/>
    <url>/2021/11/09/%E5%84%BF%E7%AB%A5%E9%BB%91%E8%AF%9D-Pig-Latin/</url>
    
    <content type="html"><![CDATA[<h3 id="Pig-Latin-儿童黑话"><a href="#Pig-Latin-儿童黑话" class="headerlink" title="Pig Latin(儿童黑话)"></a>Pig Latin(儿童黑话)</h3><h4 id="我是怎么接触到Pig-Latin的？"><a href="#我是怎么接触到Pig-Latin的？" class="headerlink" title="我是怎么接触到Pig Latin的？"></a>我是怎么接触到Pig Latin的？</h4><p>实际上我是在C++ Program Algorithm（中译版）黑皮书上接触到的，当时看到这个短语还以为是跟猪相关，真是贻笑大方了。实际上这是个语言游戏，只不过也可以用来进行简单的语言加密。</p><p>后来在查阅资料的时候，发现了一个很有趣的一段话：”Ix-nay on the upid-stay.”。这段话出现在狮子王1中dodo鸟Zazu（沙祖）在大象墓地说的话，大概意思就是愚蠢的nalx。upid-stay实际上就是stupid，是一种非常地道的英语表达。</p><h4 id="什么是Pig-Latin"><a href="#什么是Pig-Latin" class="headerlink" title="什么是Pig Latin?"></a>什么是Pig Latin?</h4><p>儿童黑话(Pig Latin)是一种英语语言游戏，形式是在英语加上一点规则使发音改变。据说是由在德国的英国战俘发明来瞒混德军守卫的。儿童黑话于50年代和60年代在英国利物浦达到颠峰，各种年纪和职业的人都有使用。儿童黑话多半被儿童用来瞒著大人秘密沟通，有时则只是说著好玩。虽然是起源于英语的游戏，但是规则适用很多其他语言。</p><h4 id="Pig-Latin规则"><a href="#Pig-Latin规则" class="headerlink" title="Pig Latin规则?"></a>Pig Latin规则?</h4><ul><li><strong>假设单词以辅音字母开始，将词首的辅音字母字符串（第一个元音字母前的全部字母）从单词的开头移动到末尾，然后加上后缀ay，这样就形成了它的pig latin。</strong></li></ul><ol><li>比如说ball，它的第一个元音是a，那么它的Pig Latin就是all-bay.</li><li>three,元音是e，变成ee-thray.</li></ol><blockquote><p>怎么样？是不是很容易理解？</p></blockquote><ul><li><strong>那么对于元音字母开头的单词，该怎么描述它的黑话？仅仅加入后缀ay就可以，也可以是way,yay,hay。为了方便统一，在本文一律用way后缀。</strong></li><li><strong>让我们看看一个示例</strong></li></ul><p>One-way o-whay as-hay een-say e-thay ocean-way inks-thay othing-nay of-way ere-may ivers-ray.</p><p>（中译：曾经沧海难为水）</p><p>（英语：One who has seen the ocean thinks nothing of mere rivers.）</p><h4 id="如何用代码实现Pig-Latin语言加密？（以JAVA为例-实现单词Pig-Latin加密，语句加密在本篇暂不实现，期待后续实现）"><a href="#如何用代码实现Pig-Latin语言加密？（以JAVA为例-实现单词Pig-Latin加密，语句加密在本篇暂不实现，期待后续实现）" class="headerlink" title="如何用代码实现Pig Latin语言加密？（以JAVA为例,实现单词Pig Latin加密，语句加密在本篇暂不实现，期待后续实现）"></a>如何用代码实现Pig Latin语言加密？（以JAVA为例,实现单词Pig Latin加密，语句加密在本篇暂不实现，期待后续实现）</h4><ol><li>首先第一步，当然是要找出第一个元音字母的位置。（已知元音字母有a,e,i,o,u，其他的都是辅音字母）</li><li>第二步，判断元音字母出现的位置，如果是一个位置，则把备用后缀设为way，否则是ay</li><li>第三步，在第一个元音字母位置分离，把单词分离为两个部分。比如ball，分离为b和all.</li><li>第四步，将分离后的第二个部分放在首部，第一个部分放在尾部。</li><li>第五步，在第四部拼合的结果上，在尾部加入后缀。</li></ol><p>那么整个编程的思路就很明了了，接下来开始撸代码。</p><p>全部代码我就放在结尾了，因为，你知道的，很影响阅读效率。</p><h5 id="判断是否是元音字母"><a href="#判断是否是元音字母" class="headerlink" title="判断是否是元音字母"></a>判断是否是元音字母</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br><span class="hljs-keyword">switch</span>(ch) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">default</span> :<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个代码也很简单就是swith-case判断，但是有一个致命问题，就是没有办法分辨大写字母情况，实际上行首的字母通常是大写的，而且大写的元音字母也是元音。so，我们应该加上所有的大写字母吗？加上所有的元音大写字母的话，整个方法会显得很臃肿。实际上java里面String类有一个方法equalsIgnoreCase判断字母是否为指定字符而忽略大小写。</p><h5 id="修改后的判断是否是元音字母代码"><a href="#修改后的判断是否是元音字母代码" class="headerlink" title="修改后的判断是否是元音字母代码"></a>修改后的判断是否是元音字母代码</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>String str = String.valueOf(ch);<br><span class="hljs-keyword">if</span>(str.equalsIgnoreCase(<span class="hljs-string">&quot;a&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;i&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;o&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;u&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的"><a href="#还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的" class="headerlink" title="还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的"></a>还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//beforeWord:倒置前字符串,index:元音字母所在位置</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reversalWord</span><span class="hljs-params">(String beforeWord,<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>String frontWord = beforeWord.substring(<span class="hljs-number">0</span>,index);<br>String breakWord = beforeWord.substring(index);<br><span class="hljs-keyword">return</span> breakWord.concat(frontWord);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h5><p>One  -&gt;  Oneway</p><h5 id="剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码"><a href="#剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码" class="headerlink" title="剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码"></a>剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码</h5><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ol><li>还可以进一步优化思路，提高程序健壮程度，降低时间复杂度。</li><li>只是实现了单个单词的Pig Latin加密，句子的Pig Latin加密没有实现，因为句子的情况更为复杂。</li></ol><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise1;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.StringTokenizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//从键盘输入</span><br>    String word=scanner.nextLine();<br>    System.out.println(translateWord(word));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">translateWord</span><span class="hljs-params">(String inputWord)</span> </span>&#123;<br>String breakWord = <span class="hljs-string">&quot;&quot;</span>;<br>String afterWord = <span class="hljs-string">&quot;&quot;</span>;<br>StringBuilder endWord = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-keyword">int</span> i = indexOfVowel(inputWord);<br><br><span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) &#123;<br>breakWord = <span class="hljs-string">&quot;way&quot;</span>;<br>endWord.append(inputWord);<br>endWord.append(breakWord);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>breakWord = <span class="hljs-string">&quot;ay&quot;</span>;<br>endWord.append(reversalWord(inputWord,i));<br>endWord.append(breakWord);<br>&#125;<br><span class="hljs-keyword">return</span> endWord.toString();<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> inputWord;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reversalWord</span><span class="hljs-params">(String beforeWord,<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>String frontWord = beforeWord.substring(<span class="hljs-number">0</span>,index);<br>String breakWord = beforeWord.substring(index);<br><span class="hljs-keyword">return</span> breakWord.concat(frontWord);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOfVowel</span><span class="hljs-params">(String inputWord)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; inputWord.length();i++) &#123;<br><span class="hljs-keyword">if</span>(isVowel(inputWord.charAt(i))) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>String str = String.valueOf(ch);<br><span class="hljs-keyword">if</span>(str.equalsIgnoreCase(<span class="hljs-string">&quot;a&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;i&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;o&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;u&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考资料:</p><p><a href="https://www.cnblogs.com/rrttp/p/7922202.html">char转化为String</a><br><a href="http://blog.sina.com.cn/s/blog_4d2b0bdb0100qluy.html">儿童黑话介绍</a><br><a href="https://www.cnblogs.com/mfrbuaa/p/3842271.html">相关代码参考</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2021/11/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <url>/2021/11/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Github搭建博客原因："><a href="#Github搭建博客原因：" class="headerlink" title="Github搭建博客原因："></a>Github搭建博客原因：</h3><ol><li>进行自我技术沉淀，平复自己浮躁的心</li><li>向Github大佬学习</li><li>回顾来时的路，有利于进行自我总结</li><li>装逼</li></ol><h3 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h3><ul><li>通过博客来记录自己的学习和生活</li><li>锻炼自己写文章的能力</li><li>夯实自己的基础</li></ul><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><ul><li>希望自己能够坚持下去，不忘初心</li><li>将我的博客精神传递给我的子孙后代，永不熄灭的分享。</li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
