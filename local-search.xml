<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>儿童黑话(Pig Latin)语言加密算法</title>
    <link href="/2021/11/09/%E5%84%BF%E7%AB%A5%E9%BB%91%E8%AF%9D-Pig-Latin/"/>
    <url>/2021/11/09/%E5%84%BF%E7%AB%A5%E9%BB%91%E8%AF%9D-Pig-Latin/</url>
    
    <content type="html"><![CDATA[<h3 id="Pig-Latin-儿童黑话"><a href="#Pig-Latin-儿童黑话" class="headerlink" title="Pig Latin(儿童黑话)"></a>Pig Latin(儿童黑话)</h3><h4 id="我是怎么接触到Pig-Latin的？"><a href="#我是怎么接触到Pig-Latin的？" class="headerlink" title="我是怎么接触到Pig Latin的？"></a>我是怎么接触到Pig Latin的？</h4><p>实际上我是在C++ Program Algorithm（中译版）黑皮书上接触到的，当时看到这个短语还以为是跟猪相关，真是贻笑大方了。实际上这是个语言游戏，只不过也可以用来进行简单的语言加密。</p><p>后来在查阅资料的时候，发现了一个很有趣的一段话：”Ix-nay on the upid-stay.”。这段话出现在狮子王1中dodo鸟Zazu（沙祖）在大象墓地说的话，大概意思就是愚蠢的nalx。upid-stay实际上就是stupid，是一种非常地道的英语表达。</p><h4 id="什么是Pig-Latin"><a href="#什么是Pig-Latin" class="headerlink" title="什么是Pig Latin?"></a>什么是Pig Latin?</h4><p>儿童黑话(Pig Latin)是一种英语语言游戏，形式是在英语加上一点规则使发音改变。据说是由在德国的英国战俘发明来瞒混德军守卫的。儿童黑话于50年代和60年代在英国利物浦达到颠峰，各种年纪和职业的人都有使用。儿童黑话多半被儿童用来瞒著大人秘密沟通，有时则只是说著好玩。虽然是起源于英语的游戏，但是规则适用很多其他语言。</p><h4 id="Pig-Latin规则"><a href="#Pig-Latin规则" class="headerlink" title="Pig Latin规则?"></a>Pig Latin规则?</h4><ul><li><strong>假设单词以辅音字母开始，将词首的辅音字母字符串（第一个元音字母前的全部字母）从单词的开头移动到末尾，然后加上后缀ay，这样就形成了它的pig latin。</strong></li></ul><ol><li>比如说ball，它的第一个元音是a，那么它的Pig Latin就是all-bay.</li><li>three,元音是e，变成ee-thray.</li></ol><blockquote><p>怎么样？是不是很容易理解？</p></blockquote><ul><li><strong>那么对于元音字母开头的单词，该怎么描述它的黑话？仅仅加入后缀ay就可以，也可以是way,yay,hay。为了方便统一，在本文一律用way后缀。</strong></li><li><strong>让我们看看一个示例</strong></li></ul><p>One-way o-whay as-hay een-say e-thay ocean-way inks-thay othing-nay of-way ere-may ivers-ray.</p><p>（中译：曾经沧海难为水）</p><p>（英语：One who has seen the ocean thinks nothing of mere rivers.）</p><h4 id="如何用代码实现Pig-Latin语言加密？（以JAVA为例-实现单词Pig-Latin加密，语句加密在本篇暂不实现，期待后续实现）"><a href="#如何用代码实现Pig-Latin语言加密？（以JAVA为例-实现单词Pig-Latin加密，语句加密在本篇暂不实现，期待后续实现）" class="headerlink" title="如何用代码实现Pig Latin语言加密？（以JAVA为例,实现单词Pig Latin加密，语句加密在本篇暂不实现，期待后续实现）"></a>如何用代码实现Pig Latin语言加密？（以JAVA为例,实现单词Pig Latin加密，语句加密在本篇暂不实现，期待后续实现）</h4><ol><li>首先第一步，当然是要找出第一个元音字母的位置。（已知元音字母有a,e,i,o,u，其他的都是辅音字母）</li><li>第二步，判断元音字母出现的位置，如果是一个位置，则把备用后缀设为way，否则是ay</li><li>第三步，在第一个元音字母位置分离，把单词分离为两个部分。比如ball，分离为b和all.</li><li>第四步，将分离后的第二个部分放在首部，第一个部分放在尾部。</li><li>第五步，在第四部拼合的结果上，在尾部加入后缀。</li></ol><p>那么整个编程的思路就很明了了，接下来开始撸代码。</p><p>全部代码我就放在结尾了，因为，你知道的，很影响阅读效率。</p><h5 id="判断是否是元音字母"><a href="#判断是否是元音字母" class="headerlink" title="判断是否是元音字母"></a>判断是否是元音字母</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br><span class="hljs-keyword">switch</span>(ch) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">default</span> :<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个代码也很简单就是swith-case判断，但是有一个致命问题，就是没有办法分辨大写字母情况，实际上行首的字母通常是大写的，而且大写的元音字母也是元音。so，我们应该加上所有的大写字母吗？加上所有的元音大写字母的话，整个方法会显得很臃肿。实际上java里面String类有一个方法equalsIgnoreCase判断字母是否为指定字符而忽略大小写。</p><h5 id="修改后的判断是否是元音字母代码"><a href="#修改后的判断是否是元音字母代码" class="headerlink" title="修改后的判断是否是元音字母代码"></a>修改后的判断是否是元音字母代码</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>String str = String.valueOf(ch);<br><span class="hljs-keyword">if</span>(str.equalsIgnoreCase(<span class="hljs-string">&quot;a&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;i&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;o&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;u&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的"><a href="#还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的" class="headerlink" title="还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的"></a>还有一个问题，在找到元音字母后如何进行字符串倒置，我的实现代码是这样的</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//beforeWord:倒置前字符串,index:元音字母所在位置</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reversalWord</span><span class="hljs-params">(String beforeWord,<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>String frontWord = beforeWord.substring(<span class="hljs-number">0</span>,index);<br>String breakWord = beforeWord.substring(index);<br><span class="hljs-keyword">return</span> breakWord.concat(frontWord);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h5><p><img src="https://greenllrno.xyz/Pig_Latin_word_result.jpg" alt="结果"></p><h5 id="剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码"><a href="#剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码" class="headerlink" title="剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码"></a>剩下的都是没什么了，有兴趣的话可以看看结尾的全部代码</h5><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ol><li>还可以进一步优化思路，提高程序健壮程度，降低时间复杂度。</li><li>只是实现了单个单词的Pig Latin加密，句子的Pig Latin加密没有实现，因为句子的情况更为复杂。</li></ol><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise1;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.StringTokenizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//从键盘输入</span><br>    String word=scanner.nextLine();<br>    System.out.println(translateWord(word));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">translateWord</span><span class="hljs-params">(String inputWord)</span> </span>&#123;<br>String breakWord = <span class="hljs-string">&quot;&quot;</span>;<br>String afterWord = <span class="hljs-string">&quot;&quot;</span>;<br>StringBuilder endWord = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-keyword">int</span> i = indexOfVowel(inputWord);<br><br><span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) &#123;<br>breakWord = <span class="hljs-string">&quot;way&quot;</span>;<br>endWord.append(inputWord);<br>endWord.append(breakWord);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>breakWord = <span class="hljs-string">&quot;ay&quot;</span>;<br>endWord.append(reversalWord(inputWord,i));<br>endWord.append(breakWord);<br>&#125;<br><span class="hljs-keyword">return</span> endWord.toString();<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> inputWord;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reversalWord</span><span class="hljs-params">(String beforeWord,<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>String frontWord = beforeWord.substring(<span class="hljs-number">0</span>,index);<br>String breakWord = beforeWord.substring(index);<br><span class="hljs-keyword">return</span> breakWord.concat(frontWord);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOfVowel</span><span class="hljs-params">(String inputWord)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; inputWord.length();i++) &#123;<br><span class="hljs-keyword">if</span>(isVowel(inputWord.charAt(i))) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isVowel</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>String str = String.valueOf(ch);<br><span class="hljs-keyword">if</span>(str.equalsIgnoreCase(<span class="hljs-string">&quot;a&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;i&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;o&quot;</span>)|<br>   str.equalsIgnoreCase(<span class="hljs-string">&quot;u&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考资料:</p><p>[]: <a href="https://www.cnblogs.com/rrttp/p/7922202.html">https://www.cnblogs.com/rrttp/p/7922202.html</a>    “char转化为String”<br>[]: <a href="http://blog.sina.com.cn/s/blog_4d2b0bdb0100qluy.html">http://blog.sina.com.cn/s/blog_4d2b0bdb0100qluy.html</a>    “儿童黑话介绍”<br>[]: <a href="https://www.cnblogs.com/mfrbuaa/p/3842271.html">https://www.cnblogs.com/mfrbuaa/p/3842271.html</a>    “相关代码参考”</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2021/11/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <url>/2021/11/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Github搭建博客原因："><a href="#Github搭建博客原因：" class="headerlink" title="Github搭建博客原因："></a>Github搭建博客原因：</h3><ol><li>进行自我技术沉淀，平复自己浮躁的心</li><li>向Github大佬学习</li><li>回顾来时的路，有利于进行自我总结</li><li>装逼</li></ol><h3 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h3><ul><li>通过博客来记录自己的学习和生活</li><li>锻炼自己写文章的能力</li><li>夯实自己的基础</li></ul><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><ul><li>希望自己能够坚持下去，不忘初心</li><li>将我的博客精神传递给我的子孙后代，永不熄灭的分享。</li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
